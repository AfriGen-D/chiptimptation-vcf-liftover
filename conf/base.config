/*
========================================================================================
    Base Configuration
========================================================================================
    Base resource requirements for the chiptimputation-vcf-liftover pipeline
========================================================================================
*/

process {
    // Base resource requirements
    cpus = { check_max(1, 'cpus') }
    memory = { check_max(4.GB * task.attempt, 'memory') }
    time = { check_max(1.h * task.attempt, 'time') }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'
    
    // Process-specific resource requirements
    withName: 'INPUT_CHECK' {
        cpus = 1
        memory = 2.GB
        time = 30.min
    }
    
    withName: 'CROSSMAP_VCF' {
        cpus = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(8.GB * task.attempt, 'memory') }
        time = { check_max(4.h * task.attempt, 'time') }
    }
    
    withName: 'SORT_VCF' {
        cpus = { check_max(4 * task.attempt, 'cpus') }
        memory = { check_max(16.GB * task.attempt, 'memory') }
        time = { check_max(2.h * task.attempt, 'time') }
    }
    
    withName: 'RENAME_CHROMOSOMES' {
        cpus = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(8.GB * task.attempt, 'memory') }
        time = { check_max(1.h * task.attempt, 'time') }
    }
    
    withName: 'FIX_CONTIG_HEADER' {
        cpus = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(8.GB * task.attempt, 'memory') }
        time = { check_max(1.h * task.attempt, 'time') }
    }
    
    withName: 'INDEX_VCF' {
        cpus = 1
        memory = { check_max(4.GB * task.attempt, 'memory') }
        time = { check_max(30.min * task.attempt, 'time') }
    }
    
    withName: 'VALIDATE_VCF' {
        cpus = 1
        memory = { check_max(4.GB * task.attempt, 'memory') }
        time = { check_max(30.min * task.attempt, 'time') }
    }
    
    withName: 'LIFTOVER_STATS' {
        cpus = 1
        memory = { check_max(4.GB * task.attempt, 'memory') }
        time = { check_max(30.min * task.attempt, 'time') }
    }
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
